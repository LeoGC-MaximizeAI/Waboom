---
import { getCollection } from 'astro:content';

// Layout import ‚Äî provides basic page elements: <head>, <nav>, <footer> etc.
import BaseLayout from '../layouts/BaseLayout.astro';

// Component Imports
import CallToAction from '../components/CallToAction.astro';
import Grid from '../components/Grid.astro';
import Hero from '../components/Hero.astro';
import Icon from '../components/Icon.astro';
import Pill from '../components/Pill.astro';
import PortfolioPreview from '../components/PortfolioPreview.astro';
import AIAgent from '../components/AIAgent.astro';
import TalkToZip from '../components/TalkToZip.astro';
import FeaturesSection from '../components/FeaturesSection.astro';
import DemoSection from '../components/DemoSection.astro';
import BrandsSection from '../components/BrandsSection.astro';
import IndustriesSection from '../components/IndustriesSection.astro';
import HowItWorks from '../components/HowItWorks.astro';
import ContactForm from '../components/ContactForm.astro';



// Add AOS CSS in the head
import 'aos/dist/aos.css';

// Create the title with dynamic part
const titleHtml = `
<div class="title-container">
	<div class="static-text">Your AI Employee That Sells, Supports, and Schedules Effortlessly, 24/7</div>
</div>
`.trim();

// Content Fetching: List four most recent work projects
const projects = (await getCollection('work'))
	.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
	.slice(0, 4);

// SEO Meta Data
const seoTitle = "AI Voice Agents for Business | Waboom";
const seoDescription = "Transform customer calls into real results with Waboom's AI voice agents. Boost satisfaction, drive revenue, and reduce costs through intelligent automation.";
const keywords = "AI voice agents, business automation, customer service automation, voice AI, call automation, sales automation, appointment scheduling, New Zealand";

// Safe canonical URL generation
const canonicalURL = Astro.site 
	? new URL(Astro.url.pathname, Astro.site)
	: new URL(`https://waboom.ai${Astro.url.pathname}`);

// Social sharing image URL
const ogImageUrl = "https://waboom.ai/assets/logo.png";

// Additional SEO data
const locale = "en-NZ";
const siteName = "Waboom";

// Full Astro Component Syntax:
// https://docs.astro.build/basics/astro-components/
---

<BaseLayout title={seoTitle} description={seoDescription}>
	<!-- Basic SEO -->
	<meta name="keywords" content={keywords} slot="head" />
	<meta name="author" content={siteName} slot="head" />
	<meta name="robots" content="index, follow" slot="head" />
	<meta name="language" content="English" slot="head" />
	<link rel="canonical" href={canonicalURL} slot="head" />
	
	<!-- Open Graph / Facebook Meta Tags -->
	<meta property="og:type" content="website" slot="head" />
	<meta property="og:site_name" content={siteName} slot="head" />
	<meta property="og:locale" content={locale} slot="head" />
	<meta property="og:url" content={canonicalURL} slot="head" />
	<meta property="og:title" content={seoTitle} slot="head" />
	<meta property="og:description" content={seoDescription} slot="head" />
	<meta property="og:image" content={ogImageUrl} slot="head" />
	<meta property="og:image:width" content="1200" slot="head" />
	<meta property="og:image:height" content="630" slot="head" />
	<meta property="og:image:alt" content="Waboom AI Voice Agent Solutions" slot="head" />

	<!-- Twitter Meta Tags -->
	<meta name="twitter:card" content="summary_large_image" slot="head" />
	<meta name="twitter:site" content="@waboom_ai" slot="head" />
	<meta name="twitter:creator" content="@waboom_ai" slot="head" />
	<meta name="twitter:url" content={canonicalURL} slot="head" />
	<meta name="twitter:title" content={seoTitle} slot="head" />
	<meta name="twitter:description" content={seoDescription} slot="head" />
	<meta name="twitter:image" content={ogImageUrl} slot="head" />
	<meta name="twitter:image:alt" content="Waboom AI Voice Agent Solutions" slot="head" />

	<!-- Additional Meta Tags -->
	<meta name="format-detection" content="telephone=no" slot="head" />
	<meta name="theme-color" content="#4f39fa" slot="head" />

	<!-- Schema.org structured data for Organization and Service -->
	<script type="application/ld+json" slot="head">
		{
			"@context": "https://schema.org",
			"@type": "Organization",
			"name": "Waboom",
			"description": "AI-powered voice agent solutions",
			"url": "https://waboom.ai",
			"sameAs": [],
			"offers": {
				"@type": "Offer",
				"name": "Free AI Strategy Session",
				"description": "One-day workshop valued at NZD 2,000",
				"price": "0",
				"priceCurrency": "NZD"
			},
			"service": {
				"@type": "Service",
				"name": "AI Voice Agents",
				"description": "AI-powered voice solutions for businesses that handle customer calls 24/7"
			}
		}
	</script>

	<div class="stack gap-8 lg:gap-20">
		<div class="wrapper stack gap-8 lg:gap-16">
			<header class="hero" role="banner">
				<Hero
					title={titleHtml}
					tagline="Waboom.ai transforms customer calls into real results boosting satisfaction, driving revenue, and seamlessly integrating with your business while reducing costs through automation."
					align="start"
				>
					<div class="hero-cta-container" data-aos="fade-up" data-aos-delay="300">
						<CallToAction href="#" aria-label="Experience our AI voice agent" data-zip-button>
							Try Zip Now
							<Icon icon="microphone-stage" size="1.2em" />
						</CallToAction>
						<a href="/voice-agents/" class="secondary-cta">
							Learn About Voice Agents
							<Icon icon="arrow-right" size="1.2em" />
						</a>
					</div>
				</Hero>

				<div class="hero-video-container" data-aos="fade-left" data-aos-duration="1000">
					<div class="ai-showcase">
						<div class="ai-capabilities">
							<div class="capability-item sales">
								<div class="icon-container">
									<Icon icon="trophy" size="1.5em" />
								</div>
								<div class="capability-text">Sales</div>
								<div class="data-flow">
									<div class="data-item phone">
										<div class="data-icon">üìû</div>
									</div>
									<div class="data-item email">
										<div class="data-icon">‚úâÔ∏è</div>
									</div>
									<div class="data-item document">
										<div class="data-icon">üìÑ</div>
									</div>
								</div>
							</div>
							<div class="capability-item support">
								<div class="icon-container">
									<Icon icon="heart" size="1.5em" />
								</div>
								<div class="capability-text">Support</div>
								<div class="data-flow">
									<div class="data-item phone">
										<div class="data-icon">üìû</div>
									</div>
									<div class="data-item email">
										<div class="data-icon">‚úâÔ∏è</div>
									</div>
									<div class="data-item document">
										<div class="data-icon">üìÑ</div>
									</div>
								</div>
							</div>
							<div class="capability-item scheduling">
								<div class="icon-container">
									<Icon icon="strategy" size="1.5em" />
								</div>
								<div class="capability-text">Scheduling</div>
								<div class="data-flow">
									<div class="data-item phone">
										<div class="data-icon">üìû</div>
									</div>
									<div class="data-item email">
										<div class="data-icon">‚úâÔ∏è</div>
									</div>
									<div class="data-item document">
										<div class="data-icon">üìÑ</div>
									</div>
								</div>
							</div>
						</div>
						<div class="processing-visual">
							<div class="process-item call-processing">
								<div class="process-title">Calls</div>
								<div class="process-visual">
									<div class="call-line active"></div>
									<div class="call-line"></div>
									<div class="call-line active"></div>
									<div class="call-line"></div>
								</div>
							</div>
							<div class="process-item email-processing">
								<div class="process-title">Emails</div>
								<div class="process-visual">
									<div class="email-icon">‚úâÔ∏è</div>
									<div class="email-icon">‚úâÔ∏è</div>
									<div class="email-icon">‚úâÔ∏è</div>
								</div>
							</div>
							<div class="process-item doc-processing">
								<div class="process-title">Documents</div>
								<div class="process-visual">
									<div class="doc-icon">üìÑ</div>
									<div class="doc-progress">
										<div class="progress-bar"></div>
									</div>
								</div>
							</div>
						</div>
						<div class="visualizer-container">
							<div class="ai-brain">
								<div class="neural-network">
									<!-- Central nodes -->
									<div class="neuron central n-central"></div>
									
									<!-- Layer 1 nodes -->
									<div class="neuron layer-1 n1"></div>
									<div class="neuron layer-1 n2"></div>
									<div class="neuron layer-1 n3"></div>
									<div class="neuron layer-1 n4"></div>
									<div class="neuron layer-1 n5"></div>
									
									<!-- Layer 2 nodes -->
									<div class="neuron layer-2 n6"></div>
									<div class="neuron layer-2 n7"></div>
									<div class="neuron layer-2 n8"></div>
									<div class="neuron layer-2 n9"></div>
									<div class="neuron layer-2 n10"></div>
									<div class="neuron layer-2 n11"></div>
									<div class="neuron layer-2 n12"></div>
									
									<!-- Output nodes -->
									<div class="neuron output n13"></div>
									<div class="neuron output n14"></div>
									<div class="neuron output n15"></div>
									
									<!-- Central to Layer 1 connections -->
									<div class="connection central-to-1 c1"></div>
									<div class="connection central-to-1 c2"></div>
									<div class="connection central-to-1 c3"></div>
									<div class="connection central-to-1 c4"></div>
									<div class="connection central-to-1 c5"></div>
									
									<!-- Layer 1 to Layer 2 connections -->
									<div class="connection layer-1-to-2 c6"></div>
									<div class="connection layer-1-to-2 c7"></div>
									<div class="connection layer-1-to-2 c8"></div>
									<div class="connection layer-1-to-2 c9"></div>
									<div class="connection layer-1-to-2 c10"></div>
									<div class="connection layer-1-to-2 c11"></div>
									<div class="connection layer-1-to-2 c12"></div>
									<div class="connection layer-1-to-2 c13"></div>
									<div class="connection layer-1-to-2 c14"></div>
									<div class="connection layer-1-to-2 c15"></div>
									
									<!-- Layer 2 to Output connections -->
									<div class="connection layer-2-to-output c16"></div>
									<div class="connection layer-2-to-output c17"></div>
									<div class="connection layer-2-to-output c18"></div>
									<div class="connection layer-2-to-output c19"></div>
									<div class="connection layer-2-to-output c20"></div>
									<div class="connection layer-2-to-output c21"></div>
									
									<!-- Data particles -->
									<div class="data-particle p1"></div>
									<div class="data-particle p2"></div>
									<div class="data-particle p3"></div>
									<div class="data-particle p4"></div>
									<div class="data-particle p5"></div>
									<div class="data-particle p6"></div>
									<div class="data-particle p7"></div>
									<div class="data-particle p8"></div>
									<div class="data-particle p9"></div>
									<div class="data-particle p10"></div>
								</div>
								
								<div class="network-systems">
									<!-- Input Systems -->
									<div class="input-systems">
										<div class="system-item database">
											<div class="system-icon">üóÑÔ∏è</div>
											<div class="system-label">Database</div>
										</div>
										<div class="system-item api">
											<div class="system-icon">üîÑ</div>
											<div class="system-label">API</div>
										</div>
										<div class="system-item web">
											<div class="system-icon">üåê</div>
											<div class="system-label">Web</div>
										</div>
									</div>
									
									<!-- Output Systems -->
									<div class="output-systems">
										<div class="system-item functions">
											<div class="system-icon">‚öôÔ∏è</div>
											<div class="system-label">Functions</div>
										</div>
										<div class="system-item rag">
											<div class="system-icon">üìù</div>
											<div class="system-label">RAG</div>
										</div>
										<div class="system-item analytics">
											<div class="system-icon">üìä</div>
											<div class="system-label">Analytics</div>
										</div>
									</div>
								</div>
								
								<!-- ROI Visualization -->
								<div class="roi-visualization">
									<div class="roi-label">ROI Growth</div>
									<div class="roi-chart">
										<div class="roi-bar"></div>
										<div class="roi-marker month-1">1m</div>
										<div class="roi-marker month-3">3m</div>
										<div class="roi-marker month-6">6m</div>
										<div class="roi-marker month-12">12m</div>
									</div>
									<div class="roi-metrics">
										<div class="metric efficiency">
											<div class="metric-icon">‚ö°</div>
											<div class="metric-value">+<span class="value-number">0</span>%</div>
										</div>
										<div class="metric cost">
											<div class="metric-icon">üí∞</div>
											<div class="metric-value">-<span class="value-number">0</span>%</div>
										</div>
										<div class="metric revenue">
											<div class="metric-icon">üìà</div>
											<div class="metric-value">+<span class="value-number">0</span>%</div>
										</div>
									</div>
								</div>
							</div>
							<div class="voice-visualizer">
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
								<div class="bar"></div>
							</div>
						</div>
					</div>
				</div>
			</header>
		</div>

		<main class="wrapper stack gap-20 lg:gap-32" role="main">
			<!-- Talk to Zip Section -->
			<TalkToZip />

			<!-- Features Section -->
			<FeaturesSection />

			<!-- Demo Section -->
			<DemoSection />

			<!-- Brands Section -->
			<BrandsSection />

			<!-- Industries Section -->
			<IndustriesSection />

			<!-- How It Works Section -->
			<HowItWorks />

			<!-- Contact Form Section -->
			<ContactForm />
		</main>


	</div>
</BaseLayout>

<script>
	// Import and initialize AOS
	import AOS from 'aos';
	
	document.addEventListener('DOMContentLoaded', () => {
		// Initialize AOS
		AOS.init({
			duration: 800,
			once: true,
			offset: 100,
			mirror: true,
			anchorPlacement: 'top-bottom',
		});

		document.querySelectorAll('a[href^="#"]').forEach((anchor: Element) => {
			anchor.addEventListener('click', (e: Event) => {
				e.preventDefault();
				const link = e.currentTarget as HTMLAnchorElement;
				const href = link.getAttribute('href');
				if (href) {
					const target = document.querySelector(href);
					if (target) {
						target.scrollIntoView({
							behavior: 'smooth',
							block: 'start'
						});
					}
				}
			});
		});

		// Load GSAP from CDN
		const loadGSAP = async () => {
			const gsapScript = document.createElement('script');
			gsapScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';
			document.head.appendChild(gsapScript);

			return new Promise((resolve) => {
				gsapScript.onload = () => {
					resolve(true);
				};
			});
		};

		// Initialize the AI showcase animations
		const initAIShowcase = async () => {
			await loadGSAP();
			
			// Add gsap to window type
			interface Window {
				gsap: any;
			}
			
			const gsap = (window as any).gsap;
			
			if (!gsap) return; // Safety check

			// Voice visualizer animation
			const bars = document.querySelectorAll('.voice-visualizer .bar');
			gsap.set(bars, { 
				height: () => gsap.utils.random(5, 15),
				backgroundColor: () => {
					const hue = gsap.utils.random(180, 250); // Blue to purple range
					return `hsl(${hue}, 90%, 60%)`;
				}
			});

			gsap.to(bars, {
				height: () => gsap.utils.random(10, 60),
				duration: 0.5,
				repeat: -1,
				yoyo: true,
				ease: "power1.inOut", 
				stagger: { 
					each: 0.1,
					from: "center",
					grid: "auto",
					repeat: -1
				}
			});

			// AI Brain animations - neurons
			const centralNeuron = document.querySelector('.neuron.central');
			gsap.to(centralNeuron, {
				boxShadow: '0 0 20px #ff9500',
				scale: 1.2,
				duration: 2,
				repeat: -1,
				yoyo: true,
				ease: "sine.inOut"
			});

			const layer1Neurons = document.querySelectorAll('.neuron.layer-1');
			gsap.to(layer1Neurons, {
				boxShadow: '0 0 15px #8080ff',
				scale: 1.3,
				duration: 2,
				repeat: -1,
				yoyo: true,
				stagger: 0.3,
				ease: "sine.inOut"
			});

			const layer2Neurons = document.querySelectorAll('.neuron.layer-2');
			gsap.to(layer2Neurons, {
				boxShadow: '0 0 15px #60c0ff',
				scale: 1.3,
				duration: 2,
				repeat: -1,
				yoyo: true,
				stagger: 0.2,
				ease: "sine.inOut"
			});

			const outputNeurons = document.querySelectorAll('.neuron.output');
			gsap.to(outputNeurons, {
				boxShadow: '0 0 20px #50ff90',
				scale: 1.2,
				duration: 2,
				repeat: -1,
				yoyo: true,
				stagger: 0.4,
				ease: "sine.inOut"
			});

			// Connection animations
			const centralConnections = document.querySelectorAll('.connection.central-to-1');
			gsap.set(centralConnections, { 
				width: '0%',
				opacity: 0.3
			});

			gsap.to(centralConnections, {
				width: '20%',
				opacity: 0.7,
				duration: 1.5,
				stagger: 0.3,
				repeat: -1,
				yoyo: true,
				ease: "power2.inOut"
			});

			const layer1to2Connections = document.querySelectorAll('.connection.layer-1-to-2');
			gsap.set(layer1to2Connections, { 
				width: '0%',
				opacity: 0.3
			});

			gsap.to(layer1to2Connections, {
				width: '30%',
				opacity: 0.7,
				duration: 1.2,
				stagger: 0.15,
				repeat: -1,
				yoyo: true,
				ease: "power2.inOut"
			});

			const outputConnections = document.querySelectorAll('.connection.layer-2-to-output');
			gsap.set(outputConnections, { 
				width: '0%',
				opacity: 0.3
			});

			gsap.to(outputConnections, {
				width: '30%',
				opacity: 0.7,
				duration: 1.8,
				stagger: 0.25,
				repeat: -1,
				yoyo: true,
				ease: "power2.inOut"
			});

			// Data particle animations
			const particles = document.querySelectorAll('.data-particle');
			
			// Create random paths for particles
			const createParticlePath = (particle: Element, delay: number) => {
				// Get random connection to follow
				const connectionsArray = [
					...Array.from(centralConnections),
					...Array.from(layer1to2Connections),
					...Array.from(outputConnections)
				];
				
				const randomConnection = connectionsArray[Math.floor(Math.random() * connectionsArray.length)];
				const connectionRect = randomConnection.getBoundingClientRect();
				const parentElement = particle.parentElement;
				
				// Ensure parent element exists
				if (!parentElement) return;
				
				const parentRect = parentElement.getBoundingClientRect();
				
				// Get start and end points relative to parent
				const startX = (connectionRect.left - parentRect.left) + window.scrollX;
				const startY = (connectionRect.top - parentRect.top) + window.scrollY;
				const endX = startX + connectionRect.width;
				const endY = startY;
				
				// Start at beginning of path
				gsap.set(particle, {
					x: startX,
					y: startY, 
					opacity: 0
				});
				
				// Animate along the path
				gsap.to(particle, {
					x: endX,
					y: endY,
					opacity: 1,
					duration: gsap.utils.random(1, 2),
					delay: delay,
					ease: "power1.inOut",
					onComplete: () => {
						// Once done, create a new random path
						createParticlePath(particle, 0);
					}
				});
			};
			
			// Initialize particle animations
			particles.forEach((particle, index) => {
				createParticlePath(particle, index * 0.2);
			});

			// System item animations
			const systemItems = document.querySelectorAll('.system-item');
			systemItems.forEach((item) => {
				gsap.from(item, {
					y: 10,
					opacity: 0,
					duration: 0.5,
					delay: gsap.utils.random(0, 1),
					repeat: -1,
					repeatDelay: gsap.utils.random(3, 6),
					yoyo: true
				});
			});

			// ROI animation
			const roiBar = document.querySelector('.roi-bar');
			gsap.to(roiBar, {
				width: '95%',
				duration: 15,
				ease: "power1.inOut",
				repeat: -1
			});

			// Metric value animations
			const metricValues = document.querySelectorAll('.value-number');
			
			metricValues.forEach((metric, index) => {
				let max = 0;
				
				if (index === 0) max = 60; // Efficiency up to 60%
				if (index === 1) max = 40; // Cost reduction up to 40%
				if (index === 2) max = 80; // Revenue increase up to 80%
				
				gsap.to(metric, {
					innerText: max,
					duration: 15,
					ease: "power1.inOut",
					snap: { innerText: 1 },
					repeat: -1,
					onUpdate: () => {
						const roiBarWidth = (roiBar as HTMLElement).style.width;
						const percentComplete = parseFloat(roiBarWidth) / 95;
						const currentValue = Math.round(max * percentComplete);
						(metric as HTMLElement).innerText = currentValue.toString();
					}
				});
			});

			// Data item animations
			const dataItems = document.querySelectorAll('.data-item');
			gsap.set(dataItems, { 
				scale: 0,
				opacity: 0
			});

			gsap.to(dataItems, {
				scale: 1,
				opacity: 1,
				duration: 0.5,
				stagger: {
					each: 0.2,
					from: "start",
					grid: "auto",
					repeat: -1,
					repeatDelay: 0.5
				},
				ease: "back.out(1.7)"
			});

			// Capability items animations
			const capabilityItems = document.querySelectorAll('.capability-item');
			
			capabilityItems.forEach((item, index) => {
				const iconContainer = item.querySelector('.icon-container');
				
				// Create a pulsing effect for the icon container
				if (iconContainer) {
					gsap.to(iconContainer, {
						boxShadow: '0 0 15px rgba(255, 150, 50, 0.8)',
						scale: 1.1,
						duration: 1,
						repeat: -1,
						yoyo: true,
						ease: "sine.inOut",
						delay: index * 0.3
					});
				}
				
				// Hover effects
				item.addEventListener('mouseenter', () => {
					gsap.to(item, {
						backgroundColor: "rgba(255, 255, 255, 0.2)",
						scale: 1.05,
						duration: 0.3
					});
				});
				
				item.addEventListener('mouseleave', () => {
					gsap.to(item, {
						backgroundColor: "rgba(255, 255, 255, 0.1)",
						scale: 1,
						duration: 0.3
					});
				});
			});

			// Animate progress bars
			const progressBars = document.querySelectorAll('.progress-bar');
			gsap.to(progressBars, {
				width: '100%',
				duration: 3,
				repeat: -1,
				ease: "none",
				stagger: 1
			});

			// Create data flow animation
			const dataFlow = () => {
				const dataItems = document.querySelectorAll('.data-item');
				dataItems.forEach((item, index) => {
					setTimeout(() => {
						item.classList.add('pulse');
						setTimeout(() => {
							item.classList.remove('pulse');
						}, 500);
					}, index * 300);
				});
			};
			
			// Run data flow animation periodically
			setInterval(dataFlow, 3000);
		};

		// Initialize animations
		initAIShowcase();
	});
</script>

<style>
	.hero {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 2rem;
	}

	.hero-cta-container {
		margin-top: 1.5rem;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		width: 100%;
		max-width: 400px;
	}

	.secondary-cta {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.5rem;
		padding: 0.56em 1em;
		color: var(--gray-0);
		text-decoration: none;
		font-size: var(--text-md);
		border: 1px solid var(--gray-800);
		border-radius: 999rem;
		background-color: transparent;
		transition: all 0.3s ease;
	}

	.secondary-cta:hover {
		background-color: var(--gray-800);
		transform: translateY(-3px);
	}

	.roles {
		display: none;
	}

	.hero-video-container {
		width: 100%;
		max-width: 450px;
		border-radius: 1.5rem;
		overflow: hidden;
		box-shadow: var(--shadow-md);
		background: var(--gradient-subtle);
		aspect-ratio: 9 / 16;
	}

	.ai-showcase {
		width: 100%;
		height: 100%;
		position: relative;
		display: flex;
		flex-direction: column;
		background: linear-gradient(135deg, rgba(12, 12, 30, 0.9) 0%, rgba(30, 20, 60, 0.95) 100%);
		padding: 1rem;
		overflow: hidden;
	}

	.ai-capabilities {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
		margin-bottom: 0.75rem;
	}

	.capability-item {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 0.75rem;
		border-radius: 0.5rem;
		background-color: rgba(255, 255, 255, 0.1);
		transition: all 0.3s ease;
		position: relative;
		overflow: hidden;
		cursor: pointer;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
		border: 1px solid rgba(255, 255, 255, 0.05);
	}

	.icon-container {
		width: 2rem;
		height: 2rem;
		border-radius: 50%;
		background: var(--gradient-accent-orange);
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		flex-shrink: 0;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}

	.capability-text {
		color: white;
		font-weight: bold;
		font-size: var(--text-md);
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
	}

	.data-flow {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		display: flex;
		align-items: center;
		justify-content: flex-end;
		padding-right: 0.5rem;
		gap: 0.5rem;
	}

	.data-item {
		width: 1.5rem;
		height: 1.5rem;
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 50%;
		background-color: rgba(255, 255, 255, 0.15);
		font-size: 0.75rem;
		box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
	}

	.processing-visual {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		margin-bottom: 0.75rem;
		background-color: rgba(20, 20, 40, 0.6);
		border-radius: 0.5rem;
		padding: 0.5rem;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
		border: 1px solid rgba(255, 255, 255, 0.05);
	}

	.process-item {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.25rem;
	}

	.process-title {
		font-size: var(--text-sm);
		font-weight: bold;
		color: white;
		width: 80px;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
	}

	.process-visual {
		flex-grow: 1;
		display: flex;
		align-items: center;
		gap: 0.5rem;
		height: 24px;
	}

	.call-line {
		height: 2px;
		background-color: rgba(255, 255, 255, 0.3);
		flex-grow: 1;
		position: relative;
	}

	.call-line.active::before {
		content: "";
		position: absolute;
		width: 6px;
		height: 6px;
		border-radius: 50%;
		background-color: var(--accent-regular);
		top: -2px;
		animation: moveDot 2s linear infinite;
	}

	@keyframes moveDot {
		0% { left: 0; }
		100% { left: 100%; }
	}

	.email-icon, .doc-icon {
		font-size: 1rem;
		animation: fadeInOut 3s infinite;
		animation-delay: var(--delay, 0s);
	}

	.email-icon:nth-child(1) { --delay: 0s; }
	.email-icon:nth-child(2) { --delay: 1s; }
	.email-icon:nth-child(3) { --delay: 2s; }

	@keyframes fadeInOut {
		0% { opacity: 0; transform: translateX(-10px); }
		50% { opacity: 1; transform: translateX(0); }
		100% { opacity: 0; transform: translateX(10px); }
	}

	.doc-progress {
		width: 100px;
		height: 8px;
		background-color: rgba(255, 255, 255, 0.2);
		border-radius: 4px;
		overflow: hidden;
		margin-left: 0.5rem;
	}

	.progress-bar {
		height: 100%;
		width: 30%;
		background-color: var(--accent-regular);
		border-radius: 4px;
		animation: progress 3s linear infinite;
	}

	@keyframes progress {
		0% { width: 0%; }
		100% { width: 100%; }
	}

	.visualizer-container {
		flex-grow: 1;
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.ai-brain {
		flex-grow: 1;
		position: relative;
		border-radius: 0.75rem;
		background-color: rgba(10, 10, 30, 0.8);
		overflow: hidden;
		box-shadow: inset 0 0 15px rgba(100, 100, 255, 0.1);
		border: 1px solid rgba(100, 100, 255, 0.1);
		padding: 0.5rem;
		display: flex;
		flex-direction: column;
	}

	.neural-network {
		position: relative;
		flex-grow: 1;
		width: 100%;
		height: 60%;
		margin-bottom: 0.5rem;
	}

	.neuron {
		position: absolute;
		width: 8px;
		height: 8px;
		border-radius: 50%;
		background-color: var(--accent-regular);
		box-shadow: 0 0 8px var(--accent-regular);
	}

	.neuron.central {
		width: 14px;
		height: 14px;
		top: 50%;
		left: 5%;
		transform: translate(-50%, -50%);
		background-color: #ff9500;
		box-shadow: 0 0 12px #ff9500;
	}

	.neuron.layer-1 {
		width: 10px;
		height: 10px;
		left: 25%;
		background-color: #8080ff;
		box-shadow: 0 0 10px #8080ff;
	}

	.neuron.layer-2 {
		width: 10px;
		height: 10px;
		left: 55%;
		background-color: #60c0ff;
		box-shadow: 0 0 10px #60c0ff;
	}

	.neuron.output {
		width: 12px;
		height: 12px;
		left: 85%;
		background-color: #50ff90;
		box-shadow: 0 0 12px #50ff90;
	}

	.n1 { top: 15%; }
	.n2 { top: 30%; }
	.n3 { top: 50%; }
	.n4 { top: 70%; }
	.n5 { top: 85%; }
	
	.n6 { top: 10%; }
	.n7 { top: 25%; }
	.n8 { top: 40%; }
	.n9 { top: 55%; }
	.n10 { top: 70%; }
	.n11 { top: 85%; }
	.n12 { top: 95%; }
	
	.n13 { top: 25%; }
	.n14 { top: 50%; }
	.n15 { top: 75%; }

	.connection {
		position: absolute;
		height: 2px;
		background: linear-gradient(90deg, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.1));
		box-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
		transform-origin: left center;
	}

	.connection.central-to-1 {
		left: 5%;
		width: 20%;
	}

	.connection.layer-1-to-2 {
		left: 25%;
		width: 30%;
	}

	.connection.layer-2-to-output {
		left: 55%;
		width: 30%;
	}

	/* Connection transformations - custom angles for each connection */
	.c1 { top: 15.5%; transform: rotate(-35deg); }
	.c2 { top: 30.5%; transform: rotate(-20deg); }
	.c3 { top: 50.5%; transform: rotate(0deg); }
	.c4 { top: 70.5%; transform: rotate(20deg); }
	.c5 { top: 85.5%; transform: rotate(35deg); }
	
	.c6 { top: 15%; transform: rotate(-15deg); }
	.c7 { top: 20%; transform: rotate(15deg); }
	.c8 { top: 30%; transform: rotate(-10deg); }
	.c9 { top: 35%; transform: rotate(10deg); }
	.c10 { top: 50%; transform: rotate(-5deg); }
	.c11 { top: 55%; transform: rotate(5deg); }
	.c12 { top: 70%; transform: rotate(-10deg); }
	.c13 { top: 75%; transform: rotate(10deg); }
	.c14 { top: 85%; transform: rotate(-15deg); }
	.c15 { top: 90%; transform: rotate(15deg); }
	
	.c16 { top: 25%; left: 57%; transform: rotate(-20deg); }
	.c17 { top: 30%; left: 62%; transform: rotate(-10deg); }
	.c18 { top: 50%; left: 55%; transform: rotate(0deg); }
	.c19 { top: 55%; left: 62%; transform: rotate(10deg); }
	.c20 { top: 75%; left: 57%; transform: rotate(20deg); }
	.c21 { top: 80%; left: 60%; transform: rotate(10deg); }

	.data-particle {
		position: absolute;
		width: 4px;
		height: 4px;
		border-radius: 50%;
		background-color: #ffaa44;
		box-shadow: 0 0 6px #ffaa44;
		opacity: 0;
	}

	.network-systems {
		display: flex;
		justify-content: space-between;
		width: 100%;
		margin-bottom: 0.5rem;
	}

	.input-systems, .output-systems {
		display: flex;
		gap: 0.5rem;
	}

	.system-item {
		display: flex;
		flex-direction: column;
		align-items: center;
		background-color: rgba(30, 30, 50, 0.6);
		padding: 0.25rem 0.5rem;
		border-radius: 0.5rem;
		border: 1px solid rgba(255, 255, 255, 0.1);
	}

	.system-icon {
		font-size: 1rem;
		margin-bottom: 0.25rem;
	}

	.system-label {
		font-size: 0.6rem;
		color: white;
		white-space: nowrap;
	}

	.roi-visualization {
		margin-top: auto;
		background-color: rgba(30, 30, 50, 0.6);
		border-radius: 0.5rem;
		padding: 0.5rem;
		border: 1px solid rgba(255, 255, 255, 0.1);
	}

	.roi-label {
		font-size: 0.7rem;
		color: white;
		margin-bottom: 0.25rem;
		text-align: center;
		font-weight: bold;
	}

	.roi-chart {
		height: 1.5rem;
		background-color: rgba(0, 0, 0, 0.3);
		border-radius: 0.25rem;
		margin-bottom: 0.5rem;
		position: relative;
		overflow: hidden;
	}

	.roi-bar {
		height: 100%;
		width: 0%;
		background: linear-gradient(90deg, #3498db, #2ecc71);
		border-radius: 0.25rem;
		box-shadow: 0 0 10px rgba(46, 204, 113, 0.5);
	}

	.roi-marker {
		position: absolute;
		bottom: 0;
		font-size: 0.6rem;
		color: rgba(255, 255, 255, 0.7);
	}

	.month-1 { left: 25%; }
	.month-3 { left: 50%; }
	.month-6 { left: 75%; }
	.month-12 { right: 5px; }

	.roi-metrics {
		display: flex;
		justify-content: space-between;
	}

	.metric {
		display: flex;
		align-items: center;
		gap: 0.25rem;
	}

	.metric-icon {
		font-size: 0.8rem;
	}

	.metric-value {
		font-size: 0.7rem;
		color: white;
		font-weight: bold;
	}

	.efficiency .metric-value {
		color: #2ecc71;
	}

	.cost .metric-value {
		color: #3498db;
	}

	.revenue .metric-value {
		color: #f39c12;
	}

	.voice-visualizer {
		height: 60px;
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 0 0.75rem;
		background-color: rgba(20, 20, 40, 0.6);
		border-radius: 0.75rem;
		box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
		border: 1px solid rgba(255, 255, 255, 0.05);
	}

	.bar {
		width: 4px;
		height: 20px;
		background-color: var(--accent-regular);
		border-radius: 2px;
		box-shadow: 0 0 8px var(--accent-regular);
	}

	.hero-video {
		display: none;
	}

	@media (min-width: 50em) {
		.hero {
			display: grid;
			grid-template-columns: 6fr 4fr;
			padding-inline: 2.5rem;
			gap: 3.75rem;
		}

		.roles {
			margin-top: 0.5rem;
			display: flex;
			gap: 0.5rem;
		}

		.hero-video-container {
			width: 100%;
			max-width: none;
			border-radius: 2.5rem;
		}

		.ai-showcase {
			padding: 1.5rem;
		}

		.hero-cta-container {
			margin-top: 2rem;
			flex-direction: row;
			max-width: none;
		}
		
		.ai-capabilities {
			flex-direction: column;
			gap: 1rem;
		}
	}

	/* ====================================================== */

	.section {
		display: grid;
		gap: 2rem;
		grid-template-areas: 'header' 'content';
	}

	.with-background {
		position: relative;
	}

	.with-background::before {
		--hero-bg: var(--bg-image-subtle-2);

		content: '';
		position: absolute;
		pointer-events: none;
		left: 50%;
		width: 100vw;
		aspect-ratio: calc(2.25 / var(--bg-scale));
		top: 0;
		transform: translateY(-75%) translateX(-50%);
		background:
			url('/assets/backgrounds/noise.png') top center/220px repeat,
			var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
			var(--gray-999);
		background-blend-mode: overlay, normal, normal, normal;
		mix-blend-mode: var(--bg-blend-mode);
		z-index: -1;
	}

	.with-background.bg-variant::before {
		--hero-bg: var(--bg-image-subtle-1);
	}

	.section-header {
		grid-area: header;
		justify-self: center;
		text-align: center;
		max-width: 50ch;
		font-size: var(--text-md);
		color: var(--gray-300);
	}

	.section-header h3 {
		font-size: var(--text-2xl);
		white-space: nowrap;
		margin-bottom: 0.5rem;
	}

	.section-header p {
		margin: 0;
	}

	.title-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.5rem;
	}

	.static-text {
		display: block;
		white-space: normal;
		font-size: 0.65em;
		line-height: 1.2;
		text-align: center;
	}

	@media (min-width: 50em) {
		.title-container {
			flex-direction: row;
			gap: 0.75rem;
			justify-content: flex-start;
			align-items: center;
		}

		.static-text {
			font-size: 0.7em;
			text-align: left;
		}
	}
</style>
